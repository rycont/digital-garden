---
import { writeFile } from "fs/promises";
import Layout from "../layouts/article.astro";

interface Article {
  url: string;
  title: string;
  content: string;
}

const articleFiles = await Astro.glob("./*.{md,astro}");

const articles: Article[] = articleFiles.map((file) => ({
  url: file.url,
  title: file.frontmatter.title || file.url,
  content: file.compiledContent(),
}));

const bidirectionalLinkingArticles = buildGraphFromArticles(articles);

function buildGraphFromArticles(articles: Article[]) {
  const articlesWithLink = articles.map((article) => ({
    ...article,
    links: extractInternalLinksFromHTML(article.content),
  }));

  const targets = articlesWithLink.flatMap((article) => article.links);
  const uniqueTargets = [...new Set(targets)];

  const linkedWithTargets = uniqueTargets.map((target) =>
    getArticleByLinkTargetURL(articlesWithLink, target)
  );

  return linkedWithTargets;
}

function getArticleByLinkTargetURL(
  articles: (Article & {
    links: string[];
  })[],
  url: string
) {
  const targetArticle = articles.find((article) => article.url === url);
  const mentionedIn = articles.filter((article) => article.links.includes(url));

  if (!targetArticle) {
    //     writeFile(
    //       `./src/pages/${url}.md`,
    //       `---
    // title: ${url}
    // layout: ../layouts/article.astro
    // ---
    // # ${url}
    // 아직 작성되지 않은 주제입니다.
    // `
    //     );
  }

  return {
    title: targetArticle?.title || url,
    url,
    mentionedIn,
  };
}

function extractInternalLinksFromHTML(html: string) {
  const linkTags = html.match(/<a href="(.+?)">/g);
  if (!linkTags) return [];

  const linkTargets = linkTags
    .map((link) => link.match(/<a href="(.+?)"/)?.[1])
    .filter(Boolean) as string[];

  const decodedLinkTargets = linkTargets.map((link) => decodeURI(link));
  const internalLinkTargets = decodedLinkTargets.filter(
    (link) => !link.includes(":")
  );

  return internalLinkTargets;
}

const sortedWithMentionedLinks = bidirectionalLinkingArticles.sort(
  (a, b) => b.mentionedIn.length - a.mentionedIn.length
);
---

<Layout>
  <h2>모든 글</h2>

  <p>다른 글에서 링크된 횟수를 기준으로 정렬했습니다</p>

  <ul>
    {
      sortedWithMentionedLinks.map((article) => (
        <li>
          <a href={article.url}>
            ({article.mentionedIn.length}회) {article.title}
          </a>
        </li>
      ))
    }
  </ul>
</Layout>
